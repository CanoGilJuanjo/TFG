{
  "version": 3,
  "sources": ["../../vite/dist/node/index.js", "../../vite/dist/node/runtime.js", "../../@vitejs/plugin-react/dist/index.mjs"],
  "sourcesContent": ["export { parseAst, parseAstAsync } from 'rollup/parseAst';\nimport { i as isInNodeModules, a as arraify } from './chunks/dep-whKeNLxG.js';\nexport { b as build, g as buildErrorMessage, k as createFilter, v as createLogger, c as createServer, d as defineConfig, h as fetchModule, f as formatPostcssSourceMap, x as isFileServingAllowed, l as loadConfigFromFile, y as loadEnv, j as mergeAlias, m as mergeConfig, n as normalizePath, o as optimizeDeps, e as preprocessCSS, p as preview, r as resolveConfig, z as resolveEnvPrefix, q as rollupVersion, w as searchForWorkspaceRoot, u as send, s as sortUserPlugins, t as transformWithEsbuild } from './chunks/dep-whKeNLxG.js';\nexport { VERSION as version } from './constants.js';\nexport { version as esbuildVersion } from 'esbuild';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { ViteRuntime, ESModulesRunner } from 'vite/runtime';\nimport 'node:fs/promises';\nimport 'node:path';\nimport 'node:url';\nimport 'node:util';\nimport 'node:perf_hooks';\nimport 'node:module';\nimport 'tty';\nimport 'path';\nimport 'fs';\nimport 'events';\nimport 'assert';\nimport 'node:child_process';\nimport 'node:http';\nimport 'node:https';\nimport 'util';\nimport 'net';\nimport 'url';\nimport 'http';\nimport 'stream';\nimport 'os';\nimport 'child_process';\nimport 'node:os';\nimport 'node:crypto';\nimport 'node:dns';\nimport 'crypto';\nimport 'module';\nimport 'node:assert';\nimport 'node:v8';\nimport 'node:worker_threads';\nimport 'node:buffer';\nimport 'node:events';\nimport 'querystring';\nimport 'node:readline';\nimport 'zlib';\nimport 'buffer';\nimport 'https';\nimport 'tls';\nimport 'node:zlib';\n\n// This file will be built for both ESM and CJS. Avoid relying on other modules as possible.\n// copy from constants.ts\nconst CSS_LANGS_RE = \n// eslint-disable-next-line regexp/no-unused-capturing-group\n/\\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\\?)/;\nconst isCSSRequest = (request) => CSS_LANGS_RE.test(request);\n// Use splitVendorChunkPlugin() to get the same manualChunks strategy as Vite 2.7\n// We don't recommend using this strategy as a general solution moving forward\n// splitVendorChunk is a simple index/vendor strategy that was used in Vite\n// until v2.8. It is exposed to let people continue to use it in case it was\n// working well for their setups.\n// The cache needs to be reset on buildStart for watch mode to work correctly\n// Don't use this manualChunks strategy for ssr, lib mode, and 'umd' or 'iife'\n/**\n * @deprecated use build.rollupOutput.manualChunks or framework specific configuration\n */\nclass SplitVendorChunkCache {\n    cache;\n    constructor() {\n        this.cache = new Map();\n    }\n    reset() {\n        this.cache = new Map();\n    }\n}\n/**\n * @deprecated use build.rollupOutput.manualChunks or framework specific configuration\n */\nfunction splitVendorChunk(options = {}) {\n    const cache = options.cache ?? new SplitVendorChunkCache();\n    return (id, { getModuleInfo }) => {\n        if (isInNodeModules(id) &&\n            !isCSSRequest(id) &&\n            staticImportedByEntry(id, getModuleInfo, cache.cache)) {\n            return 'vendor';\n        }\n    };\n}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n    if (cache.has(id)) {\n        return cache.get(id);\n    }\n    if (importStack.includes(id)) {\n        // circular deps!\n        cache.set(id, false);\n        return false;\n    }\n    const mod = getModuleInfo(id);\n    if (!mod) {\n        cache.set(id, false);\n        return false;\n    }\n    if (mod.isEntry) {\n        cache.set(id, true);\n        return true;\n    }\n    const someImporterIs = mod.importers.some((importer) => staticImportedByEntry(importer, getModuleInfo, cache, importStack.concat(id)));\n    cache.set(id, someImporterIs);\n    return someImporterIs;\n}\n/**\n * @deprecated use build.rollupOutput.manualChunks or framework specific configuration\n */\nfunction splitVendorChunkPlugin() {\n    const caches = [];\n    function createSplitVendorChunk(output, config) {\n        const cache = new SplitVendorChunkCache();\n        caches.push(cache);\n        const build = config.build ?? {};\n        const format = output?.format;\n        if (!build.ssr && !build.lib && format !== 'umd' && format !== 'iife') {\n            return splitVendorChunk({ cache });\n        }\n    }\n    return {\n        name: 'vite:split-vendor-chunk',\n        config(config) {\n            let outputs = config?.build?.rollupOptions?.output;\n            if (outputs) {\n                outputs = arraify(outputs);\n                for (const output of outputs) {\n                    const viteManualChunks = createSplitVendorChunk(output, config);\n                    if (viteManualChunks) {\n                        if (output.manualChunks) {\n                            if (typeof output.manualChunks === 'function') {\n                                const userManualChunks = output.manualChunks;\n                                output.manualChunks = (id, api) => {\n                                    return userManualChunks(id, api) ?? viteManualChunks(id, api);\n                                };\n                            }\n                            else {\n                                // else, leave the object form of manualChunks untouched, as\n                                // we can't safely replicate rollup handling.\n                                // eslint-disable-next-line no-console\n                                console.warn(\"(!) the `splitVendorChunk` plugin doesn't have any effect when using the object form of `build.rollupOptions.output.manualChunks`. Consider using the function form instead.\");\n                            }\n                        }\n                        else {\n                            output.manualChunks = viteManualChunks;\n                        }\n                    }\n                }\n            }\n            else {\n                return {\n                    build: {\n                        rollupOptions: {\n                            output: {\n                                manualChunks: createSplitVendorChunk({}, config),\n                            },\n                        },\n                    },\n                };\n            }\n        },\n        buildStart() {\n            caches.forEach((cache) => cache.reset());\n        },\n    };\n}\n\nclass ServerHMRBroadcasterClient {\n    hmrChannel;\n    constructor(hmrChannel) {\n        this.hmrChannel = hmrChannel;\n    }\n    send(...args) {\n        let payload;\n        if (typeof args[0] === 'string') {\n            payload = {\n                type: 'custom',\n                event: args[0],\n                data: args[1],\n            };\n        }\n        else {\n            payload = args[0];\n        }\n        if (payload.type !== 'custom') {\n            throw new Error('Cannot send non-custom events from the client to the server.');\n        }\n        this.hmrChannel.send(payload);\n    }\n}\n/**\n * The connector class to establish HMR communication between the server and the Vite runtime.\n * @experimental\n */\nclass ServerHMRConnector {\n    handlers = [];\n    hmrChannel;\n    hmrClient;\n    connected = false;\n    constructor(server) {\n        const hmrChannel = server.hot?.channels.find((c) => c.name === 'ssr');\n        if (!hmrChannel) {\n            throw new Error(\"Your version of Vite doesn't support HMR during SSR. Please, use Vite 5.1 or higher.\");\n        }\n        this.hmrClient = new ServerHMRBroadcasterClient(hmrChannel);\n        hmrChannel.api.outsideEmitter.on('send', (payload) => {\n            this.handlers.forEach((listener) => listener(payload));\n        });\n        this.hmrChannel = hmrChannel;\n    }\n    isReady() {\n        return this.connected;\n    }\n    send(message) {\n        const payload = JSON.parse(message);\n        this.hmrChannel.api.innerEmitter.emit(payload.event, payload.data, this.hmrClient);\n    }\n    onUpdate(handler) {\n        this.handlers.push(handler);\n        handler({ type: 'connected' });\n        this.connected = true;\n    }\n}\n\nfunction createHMROptions(server, options) {\n    if (server.config.server.hmr === false || options.hmr === false) {\n        return false;\n    }\n    const connection = new ServerHMRConnector(server);\n    return {\n        connection,\n        logger: options.hmr?.logger,\n    };\n}\nconst prepareStackTrace = {\n    retrieveFile(id) {\n        if (existsSync(id)) {\n            return readFileSync(id, 'utf-8');\n        }\n    },\n};\nfunction resolveSourceMapOptions(options) {\n    if (options.sourcemapInterceptor != null) {\n        if (options.sourcemapInterceptor === 'prepareStackTrace') {\n            return prepareStackTrace;\n        }\n        if (typeof options.sourcemapInterceptor === 'object') {\n            return { ...prepareStackTrace, ...options.sourcemapInterceptor };\n        }\n        return options.sourcemapInterceptor;\n    }\n    if (typeof process !== 'undefined' && 'setSourceMapsEnabled' in process) {\n        return 'node';\n    }\n    return prepareStackTrace;\n}\n/**\n * Create an instance of the Vite SSR runtime that support HMR.\n * @experimental\n */\nasync function createViteRuntime(server, options = {}) {\n    const hmr = createHMROptions(server, options);\n    return new ViteRuntime({\n        ...options,\n        root: server.config.root,\n        fetchModule: server.ssrFetchModule,\n        hmr,\n        sourcemapInterceptor: resolveSourceMapOptions(options),\n    }, options.runner || new ESModulesRunner());\n}\n\nexport { ServerHMRConnector, createViteRuntime, isCSSRequest, splitVendorChunk, splitVendorChunkPlugin };\n", "const VALID_ID_PREFIX = \"/@id/\", NULL_BYTE_PLACEHOLDER = \"__x00__\";\nlet SOURCEMAPPING_URL = \"sourceMa\";\nSOURCEMAPPING_URL += \"ppingURL\";\nconst isWindows = typeof process < \"u\" && process.platform === \"win32\";\nfunction wrapId(id) {\n  return id.startsWith(VALID_ID_PREFIX) ? id : VALID_ID_PREFIX + id.replace(\"\\0\", NULL_BYTE_PLACEHOLDER);\n}\nfunction unwrapId(id) {\n  return id.startsWith(VALID_ID_PREFIX) ? id.slice(VALID_ID_PREFIX.length).replace(NULL_BYTE_PLACEHOLDER, \"\\0\") : id;\n}\nconst windowsSlashRE = /\\\\/g;\nfunction slash(p) {\n  return p.replace(windowsSlashRE, \"/\");\n}\nconst postfixRE = /[?#].*$/;\nfunction cleanUrl(url) {\n  return url.replace(postfixRE, \"\");\n}\nfunction isPrimitive(value) {\n  return !value || typeof value != \"object\" && typeof value != \"function\";\n}\nfunction withTrailingSlash(path) {\n  return path[path.length - 1] !== \"/\" ? `${path}/` : path;\n}\nconst AsyncFunction = async function() {\n}.constructor, _DRIVE_LETTER_START_RE = /^[A-Za-z]:\\//;\nfunction normalizeWindowsPath(input = \"\") {\n  return input && input.replace(/\\\\/g, \"/\").replace(_DRIVE_LETTER_START_RE, (r) => r.toUpperCase());\n}\nconst _IS_ABSOLUTE_RE = /^[/\\\\](?![/\\\\])|^[/\\\\]{2}(?!\\.)|^[A-Za-z]:[/\\\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/;\nfunction cwd() {\n  return typeof process < \"u\" && typeof process.cwd == \"function\" ? process.cwd().replace(/\\\\/g, \"/\") : \"/\";\n}\nconst resolve = function(...arguments_) {\n  arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument));\n  let resolvedPath = \"\", resolvedAbsolute = !1;\n  for (let index = arguments_.length - 1; index >= -1 && !resolvedAbsolute; index--) {\n    const path = index >= 0 ? arguments_[index] : cwd();\n    !path || path.length === 0 || (resolvedPath = `${path}/${resolvedPath}`, resolvedAbsolute = isAbsolute(path));\n  }\n  return resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute), resolvedAbsolute && !isAbsolute(resolvedPath) ? `/${resolvedPath}` : resolvedPath.length > 0 ? resolvedPath : \".\";\n};\nfunction normalizeString(path, allowAboveRoot) {\n  let res = \"\", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;\n  for (let index = 0; index <= path.length; ++index) {\n    if (index < path.length)\n      char = path[index];\n    else {\n      if (char === \"/\")\n        break;\n      char = \"/\";\n    }\n    if (char === \"/\") {\n      if (!(lastSlash === index - 1 || dots === 1))\n        if (dots === 2) {\n          if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== \".\" || res[res.length - 2] !== \".\") {\n            if (res.length > 2) {\n              const lastSlashIndex = res.lastIndexOf(\"/\");\n              lastSlashIndex === -1 ? (res = \"\", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\")), lastSlash = index, dots = 0;\n              continue;\n            } else if (res.length > 0) {\n              res = \"\", lastSegmentLength = 0, lastSlash = index, dots = 0;\n              continue;\n            }\n          }\n          allowAboveRoot && (res += res.length > 0 ? \"/..\" : \"..\", lastSegmentLength = 2);\n        } else\n          res.length > 0 ? res += `/${path.slice(lastSlash + 1, index)}` : res = path.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;\n      lastSlash = index, dots = 0;\n    } else\n      char === \".\" && dots !== -1 ? ++dots : dots = -1;\n  }\n  return res;\n}\nconst isAbsolute = function(p) {\n  return _IS_ABSOLUTE_RE.test(p);\n}, dirname = function(p) {\n  const segments = normalizeWindowsPath(p).replace(/\\/$/, \"\").split(\"/\").slice(0, -1);\n  return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += \"/\"), segments.join(\"/\") || (isAbsolute(p) ? \"/\" : \".\");\n}, decodeBase64 = typeof atob < \"u\" ? atob : (str) => Buffer.from(str, \"base64\").toString(\"utf-8\"), CHAR_FORWARD_SLASH = 47, CHAR_BACKWARD_SLASH = 92, percentRegEx = /%/g, backslashRegEx = /\\\\/g, newlineRegEx = /\\n/g, carriageReturnRegEx = /\\r/g, tabRegEx = /\\t/g, questionRegex = /\\?/g, hashRegex = /#/g;\nfunction encodePathChars(filepath) {\n  return filepath.indexOf(\"%\") !== -1 && (filepath = filepath.replace(percentRegEx, \"%25\")), !isWindows && filepath.indexOf(\"\\\\\") !== -1 && (filepath = filepath.replace(backslashRegEx, \"%5C\")), filepath.indexOf(`\n`) !== -1 && (filepath = filepath.replace(newlineRegEx, \"%0A\")), filepath.indexOf(\"\\r\") !== -1 && (filepath = filepath.replace(carriageReturnRegEx, \"%0D\")), filepath.indexOf(\"\t\") !== -1 && (filepath = filepath.replace(tabRegEx, \"%09\")), filepath;\n}\nconst posixDirname = dirname, posixResolve = resolve;\nfunction posixPathToFileHref(posixPath) {\n  let resolved = posixResolve(posixPath);\n  const filePathLast = posixPath.charCodeAt(posixPath.length - 1);\n  return (filePathLast === CHAR_FORWARD_SLASH || isWindows && filePathLast === CHAR_BACKWARD_SLASH) && resolved[resolved.length - 1] !== \"/\" && (resolved += \"/\"), resolved = encodePathChars(resolved), resolved.indexOf(\"?\") !== -1 && (resolved = resolved.replace(questionRegex, \"%3F\")), resolved.indexOf(\"#\") !== -1 && (resolved = resolved.replace(hashRegex, \"%23\")), new URL(`file://${resolved}`).href;\n}\nfunction toWindowsPath(path) {\n  return path.replace(/\\//g, \"\\\\\");\n}\nconst comma = 44, chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);\nfor (let i = 0; i < chars.length; i++) {\n  const c = chars.charCodeAt(i);\n  intToChar[i] = c, charToInt[c] = i;\n}\nfunction decode(mappings) {\n  const state = new Int32Array(5), decoded = [];\n  let index = 0;\n  do {\n    const semi = indexOf(mappings, index), line = [];\n    let sorted = !0, lastCol = 0;\n    state[0] = 0;\n    for (let i = index; i < semi; i++) {\n      let seg;\n      i = decodeInteger(mappings, i, state, 0);\n      const col = state[0];\n      col < lastCol && (sorted = !1), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);\n    }\n    sorted || sort(line), decoded.push(line), index = semi + 1;\n  } while (index <= mappings.length);\n  return decoded;\n}\nfunction indexOf(mappings, index) {\n  const idx = mappings.indexOf(\";\", index);\n  return idx === -1 ? mappings.length : idx;\n}\nfunction decodeInteger(mappings, pos, state, j) {\n  let value = 0, shift = 0, integer = 0;\n  do {\n    const c = mappings.charCodeAt(pos++);\n    integer = charToInt[c], value |= (integer & 31) << shift, shift += 5;\n  } while (integer & 32);\n  const shouldNegate = value & 1;\n  return value >>>= 1, shouldNegate && (value = -2147483648 | -value), state[j] += value, pos;\n}\nfunction hasMoreVlq(mappings, i, length) {\n  return i >= length ? !1 : mappings.charCodeAt(i) !== comma;\n}\nfunction sort(line) {\n  line.sort(sortComparator);\n}\nfunction sortComparator(a, b) {\n  return a[0] - b[0];\n}\nconst COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4;\nlet found = !1;\nfunction binarySearch(haystack, needle, low, high) {\n  for (; low <= high; ) {\n    const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;\n    if (cmp === 0)\n      return found = !0, mid;\n    cmp < 0 ? low = mid + 1 : high = mid - 1;\n  }\n  return found = !1, low - 1;\n}\nfunction upperBound(haystack, needle, index) {\n  for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++)\n    ;\n  return index;\n}\nfunction lowerBound(haystack, needle, index) {\n  for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--)\n    ;\n  return index;\n}\nfunction memoizedBinarySearch(haystack, needle, state, key) {\n  const { lastKey, lastNeedle, lastIndex } = state;\n  let low = 0, high = haystack.length - 1;\n  if (key === lastKey) {\n    if (needle === lastNeedle)\n      return found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle, lastIndex;\n    needle >= lastNeedle ? low = lastIndex === -1 ? 0 : lastIndex : high = lastIndex;\n  }\n  return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);\n}\nconst LINE_GTR_ZERO = \"`line` must be greater than 0 (lines start at line 1)\", COL_GTR_EQ_ZERO = \"`column` must be greater than or equal to 0 (columns start at column 0)\", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;\nfunction cast(map) {\n  return map;\n}\nfunction decodedMappings(map) {\n  var _a;\n  return (_a = map)._decoded || (_a._decoded = decode(map._encoded));\n}\nfunction originalPositionFor(map, needle) {\n  let { line, column, bias } = needle;\n  if (line--, line < 0)\n    throw new Error(LINE_GTR_ZERO);\n  if (column < 0)\n    throw new Error(COL_GTR_EQ_ZERO);\n  const decoded = decodedMappings(map);\n  if (line >= decoded.length)\n    return OMapping(null, null, null, null);\n  const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);\n  if (index === -1)\n    return OMapping(null, null, null, null);\n  const segment = segments[index];\n  if (segment.length === 1)\n    return OMapping(null, null, null, null);\n  const { names, resolvedSources } = map;\n  return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);\n}\nfunction OMapping(source, line, column, name) {\n  return { source, line, column, name };\n}\nfunction traceSegmentInternal(segments, memo, line, column, bias) {\n  let index = memoizedBinarySearch(segments, column, memo, line);\n  return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, index === -1 || index === segments.length ? -1 : index;\n}\nclass DecodedMap {\n  map;\n  _encoded;\n  _decoded;\n  _decodedMemo;\n  url;\n  version;\n  names = [];\n  resolvedSources;\n  constructor(map, from) {\n    this.map = map;\n    const { mappings, names, sources } = map;\n    this.version = map.version, this.names = names || [], this._encoded = mappings || \"\", this._decodedMemo = memoizedState(), this.url = from, this.resolvedSources = (sources || []).map((s) => posixResolve(s || \"\", from));\n  }\n}\nfunction memoizedState() {\n  return {\n    lastKey: -1,\n    lastNeedle: -1,\n    lastIndex: -1\n  };\n}\nfunction getOriginalPosition(map, needle) {\n  const result = originalPositionFor(map, needle);\n  return result.column == null ? null : result;\n}\nconst VITE_RUNTIME_SOURCEMAPPING_REGEXP = new RegExp(`//# ${SOURCEMAPPING_URL}=data:application/json;base64,(.+)`);\nclass ModuleCacheMap extends Map {\n  root;\n  constructor(root, entries) {\n    super(entries), this.root = withTrailingSlash(root);\n  }\n  normalize(fsPath) {\n    return normalizeModuleId(fsPath, this.root);\n  }\n  /**\n   * Assign partial data to the map\n   */\n  update(fsPath, mod) {\n    return fsPath = this.normalize(fsPath), super.has(fsPath) ? Object.assign(super.get(fsPath), mod) : this.setByModuleId(fsPath, mod), this;\n  }\n  setByModuleId(modulePath, mod) {\n    return super.set(modulePath, mod);\n  }\n  set(fsPath, mod) {\n    return this.setByModuleId(this.normalize(fsPath), mod);\n  }\n  getByModuleId(modulePath) {\n    super.has(modulePath) || this.setByModuleId(modulePath, {});\n    const mod = super.get(modulePath);\n    return mod.imports || Object.assign(mod, {\n      imports: /* @__PURE__ */ new Set(),\n      importers: /* @__PURE__ */ new Set()\n    }), mod;\n  }\n  get(fsPath) {\n    return this.getByModuleId(this.normalize(fsPath));\n  }\n  deleteByModuleId(modulePath) {\n    return super.delete(modulePath);\n  }\n  delete(fsPath) {\n    return this.deleteByModuleId(this.normalize(fsPath));\n  }\n  invalidate(id) {\n    const module = this.get(id);\n    module.evaluated = !1, module.meta = void 0, module.map = void 0, module.promise = void 0, module.exports = void 0, module.imports?.clear();\n  }\n  isImported({ importedId, importedBy }, seen = /* @__PURE__ */ new Set()) {\n    if (importedId = this.normalize(importedId), importedBy = this.normalize(importedBy), importedBy === importedId)\n      return !0;\n    if (seen.has(importedId))\n      return !1;\n    seen.add(importedId);\n    const importers = this.getByModuleId(importedId)?.importers;\n    if (!importers)\n      return !1;\n    if (importers.has(importedBy))\n      return !0;\n    for (const importer of importers)\n      if (this.isImported({\n        importedBy,\n        importedId: importer\n      }))\n        return !0;\n    return !1;\n  }\n  /**\n   * Invalidate modules that dependent on the given modules, up to the main entry\n   */\n  invalidateDepTree(ids, invalidated = /* @__PURE__ */ new Set()) {\n    for (const _id of ids) {\n      const id = this.normalize(_id);\n      if (invalidated.has(id))\n        continue;\n      invalidated.add(id);\n      const mod = super.get(id);\n      mod?.importers && this.invalidateDepTree(mod.importers, invalidated), super.delete(id);\n    }\n    return invalidated;\n  }\n  /**\n   * Invalidate dependency modules of the given modules, down to the bottom-level dependencies\n   */\n  invalidateSubDepTree(ids, invalidated = /* @__PURE__ */ new Set()) {\n    for (const _id of ids) {\n      const id = this.normalize(_id);\n      if (invalidated.has(id))\n        continue;\n      invalidated.add(id);\n      const subIds = Array.from(super.entries()).filter(([, mod]) => mod.importers?.has(id)).map(([key]) => key);\n      subIds.length && this.invalidateSubDepTree(subIds, invalidated), super.delete(id);\n    }\n    return invalidated;\n  }\n  getSourceMap(moduleId) {\n    const mod = this.get(moduleId);\n    if (mod.map)\n      return mod.map;\n    if (!mod.meta || !(\"code\" in mod.meta))\n      return null;\n    const mapString = mod.meta.code.match(VITE_RUNTIME_SOURCEMAPPING_REGEXP)?.[1];\n    if (!mapString)\n      return null;\n    const baseFile = mod.meta.file || moduleId.split(\"?\")[0];\n    return mod.map = new DecodedMap(JSON.parse(decodeBase64(mapString)), baseFile), mod.map;\n  }\n}\nconst prefixedBuiltins = /* @__PURE__ */ new Set([\"node:test\"]);\nfunction normalizeModuleId(file, root) {\n  if (prefixedBuiltins.has(file))\n    return file;\n  let unixFile = slash(file).replace(/^\\/@fs\\//, isWindows ? \"\" : \"/\").replace(/^node:/, \"\").replace(/^\\/+/, \"/\");\n  return unixFile.startsWith(root) && (unixFile = unixFile.slice(root.length - 1)), unixFile.replace(/^file:\\//, \"/\");\n}\nclass HMRContext {\n  hmrClient;\n  ownerPath;\n  newListeners;\n  constructor(hmrClient, ownerPath) {\n    this.hmrClient = hmrClient, this.ownerPath = ownerPath, hmrClient.dataMap.has(ownerPath) || hmrClient.dataMap.set(ownerPath, {});\n    const mod = hmrClient.hotModulesMap.get(ownerPath);\n    mod && (mod.callbacks = []);\n    const staleListeners = hmrClient.ctxToListenersMap.get(ownerPath);\n    if (staleListeners)\n      for (const [event, staleFns] of staleListeners) {\n        const listeners = hmrClient.customListenersMap.get(event);\n        listeners && hmrClient.customListenersMap.set(event, listeners.filter((l) => !staleFns.includes(l)));\n      }\n    this.newListeners = /* @__PURE__ */ new Map(), hmrClient.ctxToListenersMap.set(ownerPath, this.newListeners);\n  }\n  get data() {\n    return this.hmrClient.dataMap.get(this.ownerPath);\n  }\n  accept(deps, callback) {\n    if (typeof deps == \"function\" || !deps)\n      this.acceptDeps([this.ownerPath], ([mod]) => deps?.(mod));\n    else if (typeof deps == \"string\")\n      this.acceptDeps([deps], ([mod]) => callback?.(mod));\n    else if (Array.isArray(deps))\n      this.acceptDeps(deps, callback);\n    else\n      throw new Error(\"invalid hot.accept() usage.\");\n  }\n  // export names (first arg) are irrelevant on the client side, they're\n  // extracted in the server for propagation\n  acceptExports(_, callback) {\n    this.acceptDeps([this.ownerPath], ([mod]) => callback?.(mod));\n  }\n  dispose(cb) {\n    this.hmrClient.disposeMap.set(this.ownerPath, cb);\n  }\n  prune(cb) {\n    this.hmrClient.pruneMap.set(this.ownerPath, cb);\n  }\n  // Kept for backward compatibility (#11036)\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  decline() {\n  }\n  invalidate(message) {\n    this.hmrClient.notifyListeners(\"vite:invalidate\", {\n      path: this.ownerPath,\n      message\n    }), this.send(\"vite:invalidate\", { path: this.ownerPath, message }), this.hmrClient.logger.debug(`[vite] invalidate ${this.ownerPath}${message ? `: ${message}` : \"\"}`);\n  }\n  on(event, cb) {\n    const addToMap = (map) => {\n      const existing = map.get(event) || [];\n      existing.push(cb), map.set(event, existing);\n    };\n    addToMap(this.hmrClient.customListenersMap), addToMap(this.newListeners);\n  }\n  off(event, cb) {\n    const removeFromMap = (map) => {\n      const existing = map.get(event);\n      if (existing === void 0)\n        return;\n      const pruned = existing.filter((l) => l !== cb);\n      if (pruned.length === 0) {\n        map.delete(event);\n        return;\n      }\n      map.set(event, pruned);\n    };\n    removeFromMap(this.hmrClient.customListenersMap), removeFromMap(this.newListeners);\n  }\n  send(event, data) {\n    this.hmrClient.messenger.send(JSON.stringify({ type: \"custom\", event, data }));\n  }\n  acceptDeps(deps, callback = () => {\n  }) {\n    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {\n      id: this.ownerPath,\n      callbacks: []\n    };\n    mod.callbacks.push({\n      deps,\n      fn: callback\n    }), this.hmrClient.hotModulesMap.set(this.ownerPath, mod);\n  }\n}\nclass HMRMessenger {\n  connection;\n  constructor(connection) {\n    this.connection = connection;\n  }\n  queue = [];\n  send(message) {\n    this.queue.push(message), this.flush();\n  }\n  flush() {\n    this.connection.isReady() && (this.queue.forEach((msg) => this.connection.send(msg)), this.queue = []);\n  }\n}\nclass HMRClient {\n  logger;\n  importUpdatedModule;\n  hotModulesMap = /* @__PURE__ */ new Map();\n  disposeMap = /* @__PURE__ */ new Map();\n  pruneMap = /* @__PURE__ */ new Map();\n  dataMap = /* @__PURE__ */ new Map();\n  customListenersMap = /* @__PURE__ */ new Map();\n  ctxToListenersMap = /* @__PURE__ */ new Map();\n  messenger;\n  constructor(logger, connection, importUpdatedModule) {\n    this.logger = logger, this.importUpdatedModule = importUpdatedModule, this.messenger = new HMRMessenger(connection);\n  }\n  async notifyListeners(event, data) {\n    const cbs = this.customListenersMap.get(event);\n    cbs && await Promise.allSettled(cbs.map((cb) => cb(data)));\n  }\n  clear() {\n    this.hotModulesMap.clear(), this.disposeMap.clear(), this.pruneMap.clear(), this.dataMap.clear(), this.customListenersMap.clear(), this.ctxToListenersMap.clear();\n  }\n  // After an HMR update, some modules are no longer imported on the page\n  // but they may have left behind side effects that need to be cleaned up\n  // (.e.g style injections)\n  async prunePaths(paths) {\n    await Promise.all(paths.map((path) => {\n      const disposer = this.disposeMap.get(path);\n      if (disposer)\n        return disposer(this.dataMap.get(path));\n    })), paths.forEach((path) => {\n      const fn = this.pruneMap.get(path);\n      fn && fn(this.dataMap.get(path));\n    });\n  }\n  warnFailedUpdate(err, path) {\n    err.message.includes(\"fetch\") || this.logger.error(err), this.logger.error(`[hmr] Failed to reload ${path}. This could be due to syntax errors or importing non-existent modules. (see errors above)`);\n  }\n  updateQueue = [];\n  pendingUpdateQueue = !1;\n  /**\n   * buffer multiple hot updates triggered by the same src change\n   * so that they are invoked in the same order they were sent.\n   * (otherwise the order may be inconsistent because of the http request round trip)\n   */\n  async queueUpdate(payload) {\n    if (this.updateQueue.push(this.fetchUpdate(payload)), !this.pendingUpdateQueue) {\n      this.pendingUpdateQueue = !0, await Promise.resolve(), this.pendingUpdateQueue = !1;\n      const loading = [...this.updateQueue];\n      this.updateQueue = [], (await Promise.all(loading)).forEach((fn) => fn && fn());\n    }\n  }\n  async fetchUpdate(update) {\n    const { path, acceptedPath } = update, mod = this.hotModulesMap.get(path);\n    if (!mod)\n      return;\n    let fetchedModule;\n    const isSelfUpdate = path === acceptedPath, qualifiedCallbacks = mod.callbacks.filter(({ deps }) => deps.includes(acceptedPath));\n    if (isSelfUpdate || qualifiedCallbacks.length > 0) {\n      const disposer = this.disposeMap.get(acceptedPath);\n      disposer && await disposer(this.dataMap.get(acceptedPath));\n      try {\n        fetchedModule = await this.importUpdatedModule(update);\n      } catch (e) {\n        this.warnFailedUpdate(e, acceptedPath);\n      }\n    }\n    return () => {\n      for (const { deps, fn } of qualifiedCallbacks)\n        fn(deps.map((dep) => dep === acceptedPath ? fetchedModule : void 0));\n      const loggedPath = isSelfUpdate ? path : `${acceptedPath} via ${path}`;\n      this.logger.debug(`[vite] hot updated: ${loggedPath}`);\n    };\n  }\n}\nfunction analyzeImportedModDifference(mod, rawId, moduleType, metadata) {\n  if (!metadata?.isDynamicImport && moduleType !== \"module\" && metadata?.importedNames?.length) {\n    const missingBindings = metadata.importedNames.filter((s) => !(s in mod));\n    if (missingBindings.length) {\n      const lastBinding = missingBindings[missingBindings.length - 1];\n      throw new SyntaxError(`[vite] Named export '${lastBinding}' not found. The requested module '${rawId}' is a CommonJS module, which may not support all module.exports as named exports.\nCommonJS modules can always be imported via the default export, for example using:\n\nimport pkg from '${rawId}';\nconst {${missingBindings.join(\", \")}} = pkg;\n`);\n    }\n  }\n}\nfunction proxyGuardOnlyEsm(mod, rawId, metadata) {\n  return metadata?.importedNames?.length ? new Proxy(mod, {\n    get(mod2, prop) {\n      if (prop !== \"then\" && !(prop in mod2))\n        throw new SyntaxError(`[vite] The requested module '${rawId}' does not provide an export named '${prop.toString()}'`);\n      return mod2[prop];\n    }\n  }) : mod;\n}\nconst ssrModuleExportsKey = \"__vite_ssr_exports__\", ssrImportKey = \"__vite_ssr_import__\", ssrDynamicImportKey = \"__vite_ssr_dynamic_import__\", ssrExportAllKey = \"__vite_ssr_exportAll__\", ssrImportMetaKey = \"__vite_ssr_import_meta__\", noop = () => {\n}, silentConsole = {\n  debug: noop,\n  error: noop\n};\nfunction createHMRHandler(runtime) {\n  const queue = new Queue();\n  return (payload) => queue.enqueue(() => handleHMRPayload(runtime, payload));\n}\nasync function handleHMRPayload(runtime, payload) {\n  const hmrClient = runtime.hmrClient;\n  if (!(!hmrClient || runtime.isDestroyed()))\n    switch (payload.type) {\n      case \"connected\":\n        hmrClient.logger.debug(\"[vite] connected.\"), hmrClient.messenger.flush();\n        break;\n      case \"update\":\n        await hmrClient.notifyListeners(\"vite:beforeUpdate\", payload), await Promise.all(payload.updates.map(async (update) => {\n          if (update.type === \"js-update\")\n            return update.acceptedPath = unwrapId(update.acceptedPath), update.path = unwrapId(update.path), hmrClient.queueUpdate(update);\n          hmrClient.logger.error(\"[vite] css hmr is not supported in runtime mode.\");\n        })), await hmrClient.notifyListeners(\"vite:afterUpdate\", payload);\n        break;\n      case \"custom\": {\n        await hmrClient.notifyListeners(payload.event, payload.data);\n        break;\n      }\n      case \"full-reload\": {\n        const { triggeredBy } = payload, clearEntrypoints = triggeredBy ? [...runtime.entrypoints].filter((entrypoint) => runtime.moduleCache.isImported({\n          importedId: triggeredBy,\n          importedBy: entrypoint\n        })) : [...runtime.entrypoints];\n        if (!clearEntrypoints.length)\n          break;\n        hmrClient.logger.debug(\"[vite] program reload\"), await hmrClient.notifyListeners(\"vite:beforeFullReload\", payload), runtime.moduleCache.clear();\n        for (const id of clearEntrypoints)\n          await runtime.executeUrl(id);\n        break;\n      }\n      case \"prune\":\n        await hmrClient.notifyListeners(\"vite:beforePrune\", payload), await hmrClient.prunePaths(payload.paths);\n        break;\n      case \"error\": {\n        await hmrClient.notifyListeners(\"vite:error\", payload);\n        const err = payload.err;\n        hmrClient.logger.error(`[vite] Internal Server Error\n${err.message}\n${err.stack}`);\n        break;\n      }\n      default:\n        return payload;\n    }\n}\nclass Queue {\n  queue = [];\n  pending = !1;\n  enqueue(promise) {\n    return new Promise((resolve2, reject) => {\n      this.queue.push({\n        promise,\n        resolve: resolve2,\n        reject\n      }), this.dequeue();\n    });\n  }\n  dequeue() {\n    if (this.pending)\n      return !1;\n    const item = this.queue.shift();\n    return item ? (this.pending = !0, item.promise().then(item.resolve).catch(item.reject).finally(() => {\n      this.pending = !1, this.dequeue();\n    }), !0) : !1;\n  }\n}\nconst sourceMapCache = {}, fileContentsCache = {}, moduleGraphs = /* @__PURE__ */ new Set(), retrieveFileHandlers = /* @__PURE__ */ new Set(), retrieveSourceMapHandlers = /* @__PURE__ */ new Set(), createExecHandlers = (handlers) => (...args) => {\n  for (const handler of handlers) {\n    const result = handler(...args);\n    if (result)\n      return result;\n  }\n  return null;\n}, retrieveFileFromHandlers = createExecHandlers(retrieveFileHandlers), retrieveSourceMapFromHandlers = createExecHandlers(retrieveSourceMapHandlers);\nlet overridden = !1;\nconst originalPrepare = Error.prepareStackTrace;\nfunction resetInterceptor(runtime, options) {\n  moduleGraphs.delete(runtime.moduleCache), options.retrieveFile && retrieveFileHandlers.delete(options.retrieveFile), options.retrieveSourceMap && retrieveSourceMapHandlers.delete(options.retrieveSourceMap), moduleGraphs.size === 0 && (Error.prepareStackTrace = originalPrepare, overridden = !1);\n}\nfunction interceptStackTrace(runtime, options = {}) {\n  return overridden || (Error.prepareStackTrace = prepareStackTrace, overridden = !0), moduleGraphs.add(runtime.moduleCache), options.retrieveFile && retrieveFileHandlers.add(options.retrieveFile), options.retrieveSourceMap && retrieveSourceMapHandlers.add(options.retrieveSourceMap), () => resetInterceptor(runtime, options);\n}\nfunction supportRelativeURL(file, url) {\n  if (!file)\n    return url;\n  const dir = posixDirname(slash(file)), match = /^\\w+:\\/\\/[^/]*/.exec(dir);\n  let protocol = match ? match[0] : \"\";\n  const startPath = dir.slice(protocol.length);\n  return protocol && /^\\/\\w:/.test(startPath) ? (protocol += \"/\", protocol + slash(posixResolve(startPath, url))) : protocol + posixResolve(startPath, url);\n}\nfunction getRuntimeSourceMap(position) {\n  for (const moduleCache of moduleGraphs) {\n    const sourceMap = moduleCache.getSourceMap(position.source);\n    if (sourceMap)\n      return {\n        url: position.source,\n        map: sourceMap,\n        vite: !0\n      };\n  }\n  return null;\n}\nfunction retrieveFile(path) {\n  if (path in fileContentsCache)\n    return fileContentsCache[path];\n  const content = retrieveFileFromHandlers(path);\n  return typeof content == \"string\" ? (fileContentsCache[path] = content, content) : null;\n}\nfunction retrieveSourceMapURL(source) {\n  const fileData = retrieveFile(source);\n  if (!fileData)\n    return null;\n  const re = /\\/\\/[@#]\\s*sourceMappingURL=([^\\s'\"]+)\\s*$|\\/\\*[@#]\\s*sourceMappingURL=[^\\s*'\"]+\\s*\\*\\/\\s*$/gm;\n  let lastMatch, match;\n  for (; match = re.exec(fileData); )\n    lastMatch = match;\n  return lastMatch ? lastMatch[1] : null;\n}\nconst reSourceMap = /^data:application\\/json[^,]+base64,/;\nfunction retrieveSourceMap(source) {\n  const urlAndMap = retrieveSourceMapFromHandlers(source);\n  if (urlAndMap)\n    return urlAndMap;\n  let sourceMappingURL = retrieveSourceMapURL(source);\n  if (!sourceMappingURL)\n    return null;\n  let sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    const rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(\",\") + 1);\n    sourceMapData = Buffer.from(rawData, \"base64\").toString(), sourceMappingURL = source;\n  } else\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);\n  return sourceMapData ? {\n    url: sourceMappingURL,\n    map: sourceMapData\n  } : null;\n}\nfunction mapSourcePosition(position) {\n  if (!position.source)\n    return position;\n  let sourceMap = getRuntimeSourceMap(position);\n  if (sourceMap || (sourceMap = sourceMapCache[position.source]), !sourceMap) {\n    const urlAndMap = retrieveSourceMap(position.source);\n    if (urlAndMap && urlAndMap.map) {\n      const url = urlAndMap.url;\n      sourceMap = sourceMapCache[position.source] = {\n        url,\n        map: new DecodedMap(typeof urlAndMap.map == \"string\" ? JSON.parse(urlAndMap.map) : urlAndMap.map, url)\n      };\n      const contents = sourceMap.map?.map.sourcesContent;\n      sourceMap.map && contents && sourceMap.map.resolvedSources.forEach((source, i) => {\n        const content = contents[i];\n        if (content && source && url) {\n          const contentUrl = supportRelativeURL(url, source);\n          fileContentsCache[contentUrl] = content;\n        }\n      });\n    } else\n      sourceMap = sourceMapCache[position.source] = {\n        url: null,\n        map: null\n      };\n  }\n  if (sourceMap && sourceMap.map && sourceMap.url) {\n    const originalPosition = getOriginalPosition(sourceMap.map, position);\n    if (originalPosition && originalPosition.source != null)\n      return originalPosition.source = supportRelativeURL(sourceMap.url, originalPosition.source), sourceMap.vite && (originalPosition._vite = !0), originalPosition;\n  }\n  return position;\n}\nfunction mapEvalOrigin(origin) {\n  let match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    const position = mapSourcePosition({\n      name: null,\n      source: match[2],\n      line: +match[3],\n      column: +match[4] - 1\n    });\n    return `eval at ${match[1]} (${position.source}:${position.line}:${position.column + 1})`;\n  }\n  return match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin), match ? `eval at ${match[1]} (${mapEvalOrigin(match[2])})` : origin;\n}\nfunction CallSiteToString() {\n  let fileName, fileLocation = \"\";\n  if (this.isNative())\n    fileLocation = \"native\";\n  else {\n    fileName = this.getScriptNameOrSourceURL(), !fileName && this.isEval() && (fileLocation = this.getEvalOrigin(), fileLocation += \", \"), fileName ? fileLocation += fileName : fileLocation += \"<anonymous>\";\n    const lineNumber = this.getLineNumber();\n    if (lineNumber != null) {\n      fileLocation += `:${lineNumber}`;\n      const columnNumber = this.getColumnNumber();\n      columnNumber && (fileLocation += `:${columnNumber}`);\n    }\n  }\n  let line = \"\";\n  const functionName = this.getFunctionName();\n  let addSuffix = !0;\n  const isConstructor = this.isConstructor();\n  if (!(this.isToplevel() || isConstructor)) {\n    let typeName = this.getTypeName();\n    typeName === \"[object Object]\" && (typeName = \"null\");\n    const methodName = this.getMethodName();\n    functionName ? (typeName && functionName.indexOf(typeName) !== 0 && (line += `${typeName}.`), line += functionName, methodName && functionName.indexOf(`.${methodName}`) !== functionName.length - methodName.length - 1 && (line += ` [as ${methodName}]`)) : line += `${typeName}.${methodName || \"<anonymous>\"}`;\n  } else\n    isConstructor ? line += `new ${functionName || \"<anonymous>\"}` : functionName ? line += functionName : (line += fileLocation, addSuffix = !1);\n  return addSuffix && (line += ` (${fileLocation})`), line;\n}\nfunction cloneCallSite(frame) {\n  const object = {};\n  return Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach((name) => {\n    const key = name;\n    object[key] = /^(?:is|get)/.test(name) ? function() {\n      return frame[key].call(frame);\n    } : frame[key];\n  }), object.toString = CallSiteToString, object;\n}\nfunction wrapCallSite(frame, state) {\n  if (state === void 0 && (state = { nextPosition: null, curPosition: null }), frame.isNative())\n    return state.curPosition = null, frame;\n  const source = frame.getFileName() || frame.getScriptNameOrSourceURL();\n  if (source) {\n    const line = frame.getLineNumber();\n    let column = frame.getColumnNumber() - 1;\n    const headerLength = 62;\n    line === 1 && column > headerLength && !frame.isEval() && (column -= headerLength);\n    const position = mapSourcePosition({\n      name: null,\n      source,\n      line,\n      column\n    });\n    state.curPosition = position, frame = cloneCallSite(frame);\n    const originalFunctionName = frame.getFunctionName;\n    return frame.getFunctionName = function() {\n      const name = state.nextPosition == null ? originalFunctionName() : state.nextPosition.name || originalFunctionName();\n      return name === \"eval\" && \"_vite\" in position ? null : name;\n    }, frame.getFileName = function() {\n      return position.source ?? void 0;\n    }, frame.getLineNumber = function() {\n      return position.line;\n    }, frame.getColumnNumber = function() {\n      return position.column + 1;\n    }, frame.getScriptNameOrSourceURL = function() {\n      return position.source;\n    }, frame;\n  }\n  let origin = frame.isEval() && frame.getEvalOrigin();\n  return origin && (origin = mapEvalOrigin(origin), frame = cloneCallSite(frame), frame.getEvalOrigin = function() {\n    return origin || void 0;\n  }), frame;\n}\nfunction prepareStackTrace(error, stack) {\n  const name = error.name || \"Error\", message = error.message || \"\", errorString = `${name}: ${message}`, state = { nextPosition: null, curPosition: null }, processedStack = [];\n  for (let i = stack.length - 1; i >= 0; i--)\n    processedStack.push(`\n    at ${wrapCallSite(stack[i], state)}`), state.nextPosition = state.curPosition;\n  return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join(\"\");\n}\nfunction enableSourceMapSupport(runtime) {\n  if (runtime.options.sourcemapInterceptor === \"node\") {\n    if (typeof process > \"u\")\n      throw new TypeError(`Cannot use \"sourcemapInterceptor: 'node'\" because global \"process\" variable is not available.`);\n    if (typeof process.setSourceMapsEnabled != \"function\")\n      throw new TypeError(`Cannot use \"sourcemapInterceptor: 'node'\" because \"process.setSourceMapsEnabled\" function is not available. Please use Node >= 16.6.0.`);\n    const isEnabledAlready = process.sourceMapsEnabled ?? !1;\n    return process.setSourceMapsEnabled(!0), () => !isEnabledAlready && process.setSourceMapsEnabled(!1);\n  }\n  return interceptStackTrace(runtime, typeof runtime.options.sourcemapInterceptor == \"object\" ? runtime.options.sourcemapInterceptor : void 0);\n}\nclass ViteRuntime {\n  options;\n  runner;\n  debug;\n  /**\n   * Holds the cache of modules\n   * Keys of the map are ids\n   */\n  moduleCache;\n  hmrClient;\n  entrypoints = /* @__PURE__ */ new Set();\n  idToUrlMap = /* @__PURE__ */ new Map();\n  fileToIdMap = /* @__PURE__ */ new Map();\n  envProxy = new Proxy({}, {\n    get(_, p) {\n      throw new Error(`[vite-runtime] Dynamic access of \"import.meta.env\" is not supported. Please, use \"import.meta.env.${String(p)}\" instead.`);\n    }\n  });\n  _destroyed = !1;\n  _resetSourceMapSupport;\n  constructor(options, runner, debug) {\n    this.options = options, this.runner = runner, this.debug = debug, this.moduleCache = options.moduleCache ?? new ModuleCacheMap(options.root), typeof options.hmr == \"object\" && (this.hmrClient = new HMRClient(options.hmr.logger === !1 ? silentConsole : options.hmr.logger || console, options.hmr.connection, ({ acceptedPath, ssrInvalidates }) => (this.moduleCache.invalidate(acceptedPath), ssrInvalidates && this.invalidateFiles(ssrInvalidates), this.executeUrl(acceptedPath))), options.hmr.connection.onUpdate(createHMRHandler(this))), options.sourcemapInterceptor !== !1 && (this._resetSourceMapSupport = enableSourceMapSupport(this));\n  }\n  /**\n   * URL to execute. Accepts file path, server path or id relative to the root.\n   */\n  async executeUrl(url) {\n    url = this.normalizeEntryUrl(url);\n    const fetchedModule = await this.cachedModule(url);\n    return await this.cachedRequest(url, fetchedModule);\n  }\n  /**\n   * Entrypoint URL to execute. Accepts file path, server path or id relative to the root.\n   * In the case of a full reload triggered by HMR, this is the module that will be reloaded.\n   * If this method is called multiple times, all entrypoints will be reloaded one at a time.\n   */\n  async executeEntrypoint(url) {\n    url = this.normalizeEntryUrl(url);\n    const fetchedModule = await this.cachedModule(url);\n    return await this.cachedRequest(url, fetchedModule, [], {\n      entrypoint: !0\n    });\n  }\n  /**\n   * Clear all caches including HMR listeners.\n   */\n  clearCache() {\n    this.moduleCache.clear(), this.idToUrlMap.clear(), this.entrypoints.clear(), this.hmrClient?.clear();\n  }\n  /**\n   * Clears all caches, removes all HMR listeners, and resets source map support.\n   * This method doesn't stop the HMR connection.\n   */\n  async destroy() {\n    this._resetSourceMapSupport?.(), this.clearCache(), this.hmrClient = void 0, this._destroyed = !0;\n  }\n  /**\n   * Returns `true` if the runtime has been destroyed by calling `destroy()` method.\n   */\n  isDestroyed() {\n    return this._destroyed;\n  }\n  invalidateFiles(files) {\n    files.forEach((file) => {\n      const ids = this.fileToIdMap.get(file);\n      ids && ids.forEach((id) => this.moduleCache.invalidate(id));\n    });\n  }\n  // we don't use moduleCache.normalize because this URL doesn't have to follow the same rules\n  // this URL is something that user passes down manually, and is later resolved by fetchModule\n  // moduleCache.normalize is used on resolved \"file\" property\n  normalizeEntryUrl(url) {\n    if (url[0] === \".\")\n      return url;\n    url.startsWith(\"file://\") && (url = url.slice(isWindows ? 8 : 7)), url = slash(url);\n    const _root = this.options.root, root = _root[_root.length - 1] === \"/\" ? _root : `${_root}/`;\n    return url.startsWith(root) ? url.slice(root.length - 1) : url[0] === \"/\" ? url : wrapId(url);\n  }\n  processImport(exports, fetchResult, metadata) {\n    if (!(\"externalize\" in fetchResult))\n      return exports;\n    const { id, type } = fetchResult;\n    return type !== \"module\" && type !== \"commonjs\" ? exports : (analyzeImportedModDifference(exports, id, type, metadata), proxyGuardOnlyEsm(exports, id, metadata));\n  }\n  async cachedRequest(id, fetchedModule, callstack = [], metadata) {\n    const moduleId = fetchedModule.id;\n    metadata?.entrypoint && this.entrypoints.add(moduleId);\n    const mod = this.moduleCache.getByModuleId(moduleId), { imports, importers } = mod, importee = callstack[callstack.length - 1];\n    if (importee && importers.add(importee), (callstack.includes(moduleId) || Array.from(imports.values()).some((i) => importers.has(i))) && mod.exports)\n      return this.processImport(mod.exports, fetchedModule, metadata);\n    let debugTimer;\n    this.debug && (debugTimer = setTimeout(() => {\n      const getStack = () => `stack:\n${[...callstack, moduleId].reverse().map((p) => `  - ${p}`).join(`\n`)}`;\n      this.debug(`[vite-runtime] module ${moduleId} takes over 2s to load.\n${getStack()}`);\n    }, 2e3));\n    try {\n      if (mod.promise)\n        return this.processImport(await mod.promise, fetchedModule, metadata);\n      const promise = this.directRequest(id, fetchedModule, callstack);\n      return mod.promise = promise, mod.evaluated = !1, this.processImport(await promise, fetchedModule, metadata);\n    } finally {\n      mod.evaluated = !0, debugTimer && clearTimeout(debugTimer);\n    }\n  }\n  async cachedModule(id, importer) {\n    if (this._destroyed)\n      throw new Error(\"[vite] Vite runtime has been destroyed.\");\n    const normalized = this.idToUrlMap.get(id);\n    if (normalized) {\n      const mod2 = this.moduleCache.getByModuleId(normalized);\n      if (mod2.meta)\n        return mod2.meta;\n    }\n    this.debug?.(\"[vite-runtime] fetching\", id);\n    const fetchedModule = id.startsWith(\"data:\") ? { externalize: id, type: \"builtin\" } : await this.options.fetchModule(id, importer), idQuery = id.split(\"?\")[1], query = idQuery ? `?${idQuery}` : \"\", file = \"file\" in fetchedModule ? fetchedModule.file : void 0, fullFile = file ? `${file}${query}` : id, moduleId = this.moduleCache.normalize(fullFile), mod = this.moduleCache.getByModuleId(moduleId);\n    if (fetchedModule.id = moduleId, mod.meta = fetchedModule, file) {\n      const fileModules = this.fileToIdMap.get(file) || [];\n      fileModules.push(moduleId), this.fileToIdMap.set(file, fileModules);\n    }\n    return this.idToUrlMap.set(id, moduleId), this.idToUrlMap.set(unwrapId(id), moduleId), fetchedModule;\n  }\n  // override is allowed, consider this a public API\n  async directRequest(id, fetchResult, _callstack) {\n    const moduleId = fetchResult.id, callstack = [..._callstack, moduleId], mod = this.moduleCache.getByModuleId(moduleId), request = async (dep, metadata) => {\n      const fetchedModule = await this.cachedModule(dep, moduleId);\n      return this.moduleCache.getByModuleId(fetchedModule.id).importers.add(moduleId), mod.imports.add(fetchedModule.id), this.cachedRequest(dep, fetchedModule, callstack, metadata);\n    }, dynamicRequest = async (dep) => (dep = String(dep), dep[0] === \".\" && (dep = posixResolve(posixDirname(id), dep)), request(dep, { isDynamicImport: !0 }));\n    if (\"externalize\" in fetchResult) {\n      const { externalize } = fetchResult;\n      this.debug?.(\"[vite-runtime] externalizing\", externalize);\n      const exports2 = await this.runner.runExternalModule(externalize);\n      return mod.exports = exports2, exports2;\n    }\n    const { code, file } = fetchResult;\n    if (code == null) {\n      const importer = callstack[callstack.length - 2];\n      throw new Error(`[vite-runtime] Failed to load \"${id}\"${importer ? ` imported from ${importer}` : \"\"}`);\n    }\n    const modulePath = cleanUrl(file || moduleId), href = posixPathToFileHref(modulePath), filename = modulePath, dirname2 = posixDirname(modulePath), meta = {\n      filename: isWindows ? toWindowsPath(filename) : filename,\n      dirname: isWindows ? toWindowsPath(dirname2) : dirname2,\n      url: href,\n      env: this.envProxy,\n      resolve(id2, parent) {\n        throw new Error('[vite-runtime] \"import.meta.resolve\" is not supported.');\n      },\n      // should be replaced during transformation\n      glob() {\n        throw new Error('[vite-runtime] \"import.meta.glob\" is not supported.');\n      }\n    }, exports = /* @__PURE__ */ Object.create(null);\n    Object.defineProperty(exports, Symbol.toStringTag, {\n      value: \"Module\",\n      enumerable: !1,\n      configurable: !1\n    }), mod.exports = exports;\n    let hotContext;\n    this.hmrClient && Object.defineProperty(meta, \"hot\", {\n      enumerable: !0,\n      get: () => {\n        if (!this.hmrClient)\n          throw new Error(\"[vite-runtime] HMR client was destroyed.\");\n        return this.debug?.(\"[vite-runtime] creating hmr context for\", moduleId), hotContext ||= new HMRContext(this.hmrClient, moduleId), hotContext;\n      },\n      set: (value) => {\n        hotContext = value;\n      }\n    });\n    const context = {\n      [ssrImportKey]: request,\n      [ssrDynamicImportKey]: dynamicRequest,\n      [ssrModuleExportsKey]: exports,\n      [ssrExportAllKey]: (obj) => exportAll(exports, obj),\n      [ssrImportMetaKey]: meta\n    };\n    return this.debug?.(\"[vite-runtime] executing\", href), await this.runner.runViteModule(context, code, id), exports;\n  }\n}\nfunction exportAll(exports, sourceModule) {\n  if (exports !== sourceModule && !(isPrimitive(sourceModule) || Array.isArray(sourceModule) || sourceModule instanceof Promise)) {\n    for (const key in sourceModule)\n      if (key !== \"default\" && key !== \"__esModule\")\n        try {\n          Object.defineProperty(exports, key, {\n            enumerable: !0,\n            configurable: !0,\n            get: () => sourceModule[key]\n          });\n        } catch {\n        }\n  }\n}\nclass ESModulesRunner {\n  async runViteModule(context, code) {\n    await new AsyncFunction(\n      ssrModuleExportsKey,\n      ssrImportMetaKey,\n      ssrImportKey,\n      ssrDynamicImportKey,\n      ssrExportAllKey,\n      // source map should already be inlined by Vite\n      '\"use strict\";' + code\n    )(context[ssrModuleExportsKey], context[ssrImportMetaKey], context[ssrImportKey], context[ssrDynamicImportKey], context[ssrExportAllKey]), Object.seal(context[ssrModuleExportsKey]);\n  }\n  runExternalModule(filepath) {\n    return import(filepath);\n  }\n}\nexport {\n  ESModulesRunner,\n  ModuleCacheMap,\n  ViteRuntime,\n  ssrDynamicImportKey,\n  ssrExportAllKey,\n  ssrImportKey,\n  ssrImportMetaKey,\n  ssrModuleExportsKey\n};\n", "import { createFilter } from 'vite';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { createRequire } from 'node:module';\n\nconst runtimePublicPath = \"/@react-refresh\";\nconst _require = createRequire(import.meta.url);\nconst reactRefreshDir = path.dirname(\n  _require.resolve(\"react-refresh/package.json\")\n);\nconst runtimeFilePath = path.join(\n  reactRefreshDir,\n  \"cjs/react-refresh-runtime.development.js\"\n);\nconst runtimeCode = `\nconst exports = {}\n${fs.readFileSync(runtimeFilePath, \"utf-8\")}\n${fs.readFileSync(_require.resolve(\"./refreshUtils.js\"), \"utf-8\")}\nexport default exports\n`;\nconst preambleCode = `\nimport RefreshRuntime from \"__BASE__${runtimePublicPath.slice(1)}\"\nRefreshRuntime.injectIntoGlobalHook(window)\nwindow.$RefreshReg$ = () => {}\nwindow.$RefreshSig$ = () => (type) => type\nwindow.__vite_plugin_react_preamble_installed__ = true\n`;\nconst header = `\nimport RefreshRuntime from \"${runtimePublicPath}\";\n\nconst inWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\nlet prevRefreshReg;\nlet prevRefreshSig;\n\nif (import.meta.hot && !inWebWorker) {\n  if (!window.__vite_plugin_react_preamble_installed__) {\n    throw new Error(\n      \"@vitejs/plugin-react can't detect preamble. Something is wrong. \" +\n      \"See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201\"\n    );\n  }\n\n  prevRefreshReg = window.$RefreshReg$;\n  prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    RefreshRuntime.register(type, __SOURCE__ + \" \" + id)\n  };\n  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\n}`.replace(/\\n+/g, \"\");\nconst footer = `\nif (import.meta.hot && !inWebWorker) {\n  window.$RefreshReg$ = prevRefreshReg;\n  window.$RefreshSig$ = prevRefreshSig;\n\n  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {\n    RefreshRuntime.registerExportsForReactRefresh(__SOURCE__, currentExports);\n    import.meta.hot.accept((nextExports) => {\n      if (!nextExports) return;\n      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);\n      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);\n    });\n  });\n}`;\nfunction addRefreshWrapper(code, id) {\n  return header.replace(\"__SOURCE__\", JSON.stringify(id)) + code + footer.replace(\"__SOURCE__\", JSON.stringify(id));\n}\n\nlet babel;\nasync function loadBabel() {\n  if (!babel) {\n    babel = await import('@babel/core');\n  }\n  return babel;\n}\nconst refreshContentRE = /\\$Refresh(?:Reg|Sig)\\$\\(/;\nconst defaultIncludeRE = /\\.[tj]sx?$/;\nconst tsRE = /\\.tsx?$/;\nfunction viteReact(opts = {}) {\n  let devBase = \"/\";\n  const filter = createFilter(opts.include ?? defaultIncludeRE, opts.exclude);\n  const jsxImportSource = opts.jsxImportSource ?? \"react\";\n  const jsxImportRuntime = `${jsxImportSource}/jsx-runtime`;\n  const jsxImportDevRuntime = `${jsxImportSource}/jsx-dev-runtime`;\n  let isProduction = true;\n  let projectRoot = process.cwd();\n  let skipFastRefresh = false;\n  let runPluginOverrides;\n  let staticBabelOptions;\n  const importReactRE = /\\bimport\\s+(?:\\*\\s+as\\s+)?React\\b/;\n  const viteBabel = {\n    name: \"vite:react-babel\",\n    enforce: \"pre\",\n    config() {\n      if (opts.jsxRuntime === \"classic\") {\n        return {\n          esbuild: {\n            jsx: \"transform\"\n          }\n        };\n      } else {\n        return {\n          esbuild: {\n            jsx: \"automatic\",\n            jsxImportSource: opts.jsxImportSource\n          },\n          optimizeDeps: { esbuildOptions: { jsx: \"automatic\" } }\n        };\n      }\n    },\n    configResolved(config) {\n      devBase = config.base;\n      projectRoot = config.root;\n      isProduction = config.isProduction;\n      skipFastRefresh = isProduction || config.command === \"build\" || config.server.hmr === false;\n      if (\"jsxPure\" in opts) {\n        config.logger.warnOnce(\n          \"[@vitejs/plugin-react] jsxPure was removed. You can configure esbuild.jsxSideEffects directly.\"\n        );\n      }\n      const hooks = config.plugins.map((plugin) => plugin.api?.reactBabel).filter(defined);\n      if (hooks.length > 0) {\n        runPluginOverrides = (babelOptions, context) => {\n          hooks.forEach((hook) => hook(babelOptions, context, config));\n        };\n      } else if (typeof opts.babel !== \"function\") {\n        staticBabelOptions = createBabelOptions(opts.babel);\n      }\n    },\n    async transform(code, id, options) {\n      if (id.includes(\"/node_modules/\"))\n        return;\n      const [filepath] = id.split(\"?\");\n      if (!filter(filepath))\n        return;\n      const ssr = options?.ssr === true;\n      const babelOptions = (() => {\n        if (staticBabelOptions)\n          return staticBabelOptions;\n        const newBabelOptions = createBabelOptions(\n          typeof opts.babel === \"function\" ? opts.babel(id, { ssr }) : opts.babel\n        );\n        runPluginOverrides?.(newBabelOptions, { id, ssr });\n        return newBabelOptions;\n      })();\n      const plugins = [...babelOptions.plugins];\n      const isJSX = filepath.endsWith(\"x\");\n      const useFastRefresh = !skipFastRefresh && !ssr && (isJSX || (opts.jsxRuntime === \"classic\" ? importReactRE.test(code) : code.includes(jsxImportDevRuntime) || code.includes(jsxImportRuntime)));\n      if (useFastRefresh) {\n        plugins.push([\n          await loadPlugin(\"react-refresh/babel\"),\n          { skipEnvCheck: true }\n        ]);\n      }\n      if (opts.jsxRuntime === \"classic\" && isJSX) {\n        if (!isProduction) {\n          plugins.push(\n            await loadPlugin(\"@babel/plugin-transform-react-jsx-self\"),\n            await loadPlugin(\"@babel/plugin-transform-react-jsx-source\")\n          );\n        }\n      }\n      if (!plugins.length && !babelOptions.presets.length && !babelOptions.configFile && !babelOptions.babelrc) {\n        return;\n      }\n      const parserPlugins = [...babelOptions.parserOpts.plugins];\n      if (!filepath.endsWith(\".ts\")) {\n        parserPlugins.push(\"jsx\");\n      }\n      if (tsRE.test(filepath)) {\n        parserPlugins.push(\"typescript\");\n      }\n      const babel2 = await loadBabel();\n      const result = await babel2.transformAsync(code, {\n        ...babelOptions,\n        root: projectRoot,\n        filename: id,\n        sourceFileName: filepath,\n        // Required for esbuild.jsxDev to provide correct line numbers\n        retainLines: !isProduction && isJSX && opts.jsxRuntime !== \"classic\",\n        parserOpts: {\n          ...babelOptions.parserOpts,\n          sourceType: \"module\",\n          allowAwaitOutsideFunction: true,\n          plugins: parserPlugins\n        },\n        generatorOpts: {\n          ...babelOptions.generatorOpts,\n          decoratorsBeforeExport: true\n        },\n        plugins,\n        sourceMaps: true\n      });\n      if (result) {\n        let code2 = result.code;\n        if (useFastRefresh && refreshContentRE.test(code2)) {\n          code2 = addRefreshWrapper(code2, id);\n        }\n        return { code: code2, map: result.map };\n      }\n    }\n  };\n  const viteReactRefresh = {\n    name: \"vite:react-refresh\",\n    enforce: \"pre\",\n    config: (userConfig) => ({\n      build: silenceUseClientWarning(userConfig),\n      optimizeDeps: {\n        // We can't add `react-dom` because the dependency is `react-dom/client`\n        // for React 18 while it's `react-dom` for React 17. We'd need to detect\n        // what React version the user has installed.\n        include: [\"react\", jsxImportDevRuntime, jsxImportRuntime]\n      },\n      resolve: {\n        dedupe: [\"react\", \"react-dom\"]\n      }\n    }),\n    resolveId(id) {\n      if (id === runtimePublicPath) {\n        return id;\n      }\n    },\n    load(id) {\n      if (id === runtimePublicPath) {\n        return runtimeCode;\n      }\n    },\n    transformIndexHtml() {\n      if (!skipFastRefresh)\n        return [\n          {\n            tag: \"script\",\n            attrs: { type: \"module\" },\n            children: preambleCode.replace(`__BASE__`, devBase)\n          }\n        ];\n    }\n  };\n  return [viteBabel, viteReactRefresh];\n}\nviteReact.preambleCode = preambleCode;\nconst silenceUseClientWarning = (userConfig) => ({\n  rollupOptions: {\n    onwarn(warning, defaultHandler) {\n      if (warning.code === \"MODULE_LEVEL_DIRECTIVE\" && warning.message.includes(\"use client\")) {\n        return;\n      }\n      if (userConfig.build?.rollupOptions?.onwarn) {\n        userConfig.build.rollupOptions.onwarn(warning, defaultHandler);\n      } else {\n        defaultHandler(warning);\n      }\n    }\n  }\n});\nconst loadedPlugin = /* @__PURE__ */ new Map();\nfunction loadPlugin(path) {\n  const cached = loadedPlugin.get(path);\n  if (cached)\n    return cached;\n  const promise = import(path).then((module) => {\n    const value = module.default || module;\n    loadedPlugin.set(path, value);\n    return value;\n  });\n  loadedPlugin.set(path, promise);\n  return promise;\n}\nfunction createBabelOptions(rawOptions) {\n  var _a;\n  const babelOptions = {\n    babelrc: false,\n    configFile: false,\n    ...rawOptions\n  };\n  babelOptions.plugins || (babelOptions.plugins = []);\n  babelOptions.presets || (babelOptions.presets = []);\n  babelOptions.overrides || (babelOptions.overrides = []);\n  babelOptions.parserOpts || (babelOptions.parserOpts = {});\n  (_a = babelOptions.parserOpts).plugins || (_a.plugins = []);\n  return babelOptions;\n}\nfunction defined(value) {\n  return value !== void 0;\n}\n\nexport { viteReact as default };\n"],
  "mappings": "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",
  "names": ["import_node_fs", "import_node_path", "import_node_module", "path", "fs"]
}
